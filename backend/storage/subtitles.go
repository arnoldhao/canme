package storage

import (
	"context"

	"gorm.io/gorm"
)

type TranslationStatus string

const (
	StatusOriginal  TranslationStatus = "original"
	StatusPending   TranslationStatus = "pending"
	StatusRunning   TranslationStatus = "running"
	StatusCompleted TranslationStatus = "completed"
	StatusCanceled  TranslationStatus = "canceled"
	StatusError     TranslationStatus = "error"
)

type Subtitles struct {
	gorm.Model
	Key                 string            `gorm:"primaryKey;type:varchar(36);not null;unique"` // primary key generated by timestamp
	FileName            string            `gorm:"type:varchar(36);not null"`                   // original file name without extension
	Language            string            `gorm:"type:varchar(36);not null"`                   // original file language, default is original, other languages like English/Japanese
	Stream              bool              `gorm:"type:boolean;not null"`                       // whether stream, also judge whether final status
	Models              string            `gorm:"type:varchar(36)"`                            // AI translation model, only AI translation will save this value
	Brief               string            `gorm:"type:text;not null"`                          // subtitle brief
	Captions            string            `gorm:"type:text;not null"`                          // captions
	OriginalFileKey     string            `gorm:"type:varchar(36);not null"`                   // original file key
	TranslationStatus   TranslationStatus `gorm:"type:varchar(36);not null"`                   // translation status
	TranslationProgress float64           `gorm:"type:float;not null"`                         // translation progress
	ActionDescription   string            `gorm:"type:varchar(36);not null"`                   // action description
}

type SubtitlesInfo struct {
	Key                 string            `json:"key"`
	FileName            string            `json:"file_name"`
	Language            string            `json:"language"`
	Stream              bool              `json:"stream"`
	Models              string            `json:"models"`
	Brief               string            `json:"brief"`
	Captions            string            `json:"captions"`
	TranslationStatus   TranslationStatus `json:"translation_status"`
	TranslationProgress float64           `json:"translation_progress"`
	ActionDescription   string            `json:"action_description"`
}

// Create create a new subtitle record
func (s *Subtitles) Create(ctx context.Context) error {
	return GetGlobalPersistentStorage().Create(ctx, s)
}

// Read read a subtitle record by name
func (s *Subtitles) Read(ctx context.Context, key string) error {
	return GetGlobalPersistentStorage().First(ctx, s, "key = ?", key)
}

// Update update a subtitle record
func (s *Subtitles) Update(ctx context.Context) error {
	return GetGlobalPersistentStorage().Update(ctx, s, s)
}

// Delete delete a subtitle record
func (s *Subtitles) Delete(ctx context.Context) error {
	return GetGlobalPersistentStorage().Delete(ctx, s)
}

// ListSubtitles list all subtitle records, sorted by creation time in descending order
func ListSubtitles(ctx context.Context) ([]Subtitles, error) {
	var subtitles []Subtitles
	err := GetGlobalPersistentStorage().DB(ctx). // directly call DB method, use chain call
							Order("created_at DESC").
							Find(&subtitles).Error
	return subtitles, err
}
